[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# until this gets merged into steamodded main (see https://github.com/Steamopollys/Steamodded/pull/218)
# this will have to be a separate patch in this mod

# Move seed generation to be before Back:apply so that method can use random numbers
# both are Game:start_run
[[patches]]
[patches.regex]
target = "game.lua"
pattern = '''\n?[\t ]if not saveTable then
[\t ]*if args\.seed then self\.GAME\.seeded = true end
[\t ]*self\.GAME\.pseudorandom\.seed = args\.seed or \(not \(G\.SETTINGS\.tutorial_complete or G\.SETTINGS\.tutorial_progress\.completed_parts\['big_blind'\]\) and "TUTORIAL"\) or generate_starting_seed\(\)
[\t ]*end
\s*for k, v in pairs\(self\.GAME\.pseudorandom\) do if v == 0 then self\.GAME\.pseudorandom\[k\] = pseudohash\(k\.\.self\.GAME\.pseudorandom\.seed\) end end
[\t ]*self\.GAME\.pseudorandom\.hashed_seed = pseudohash\(self\.GAME\.pseudorandom\.seed\)\n?'''
position = "at"
payload = ''
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.GAME.selected_back_key = selected_back'''
match_indent = true
position = "after"
payload = '''

if not saveTable then
    if args.seed then self.GAME.seeded = true end
    self.GAME.pseudorandom.seed = args.seed or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts["big_blind"]) and "TUTORIAL") or generate_starting_seed()
end
for k, v in pairs(self.GAME.pseudorandom) do if v == 0 then self.GAME.pseudorandom[k] = pseudohash(k..self.GAME.pseudorandom.seed) end end
self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)
'''